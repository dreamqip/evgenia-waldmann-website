---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {
  value: string;
  "data-state"?: "open" | "closed";
}

const { value, ...attrs } = Astro.props;

const panelId = `accordion-${value}`;
const triggerId = `accordion-${value}-id`;
---

<accordion-item {...attrs}>
  <h3>
    <button
      type="button"
      aria-expanded="true"
      class="flex flex-1 items-center justify-between p-4 transition-all hover:underline [&[data-state=open]>[data-icon]]:rotate-180"
      aria-controls={panelId}
      data-value={value}
      data-state="closed"
      data-trigger
      id={triggerId}
    >
      <slot name="header" />
      <slot name="icon" />
    </button>
  </h3>

  <div
    id={panelId}
    role="region"
    aria-labelledby={triggerId}
    data-state="closed"
    data-panel
    class="overflow-hidden transition-[max-height] duration-300"
  >
    <slot />
  </div>
</accordion-item>

<script>
  class AccordionItem extends HTMLElement implements CustomElement {
    static get observedAttributes() {
      return ["class", "data-state"];
    }

    private _trigger: HTMLButtonElement;
    private _panel: HTMLDivElement;

    constructor() {
      super();
    }
    connectedCallback(): void {
      this.setAttribute("data-state", "closed");

      this._trigger = this.querySelector("[data-trigger]")!;
      this._panel = this.querySelector("[data-panel]")!;
    }
    disconnectedCallback(): void {
      throw new Error("Method not implemented.");
    }
    adoptedCallback(): void {
      throw new Error("Method not implemented.");
    }

    attributeChangedCallback(
      name: string,
      oldValue: string | null,
      newValue: string,
    ) {
      if (name === "class") {
        this.classList.value = newValue; // Update classList based on 'class' attribute
      }

      if (name === "data-state") {
        if (newValue === "open") {
          this.setAttribute("data-state", "open");
        } else {
          this.setAttribute("data-state", "closed");
        }
      }
    }

    private _updateState(state: string) {
      this.setAttribute("data-state", state);
      this._trigger =  
    }
  }

  customElements.define("accordion-item", AccordionItem);
</script>
